
# =============================
Инструкция к приложению "Виселица"
# =============================

Это приложение реализует классическую игру "Виселица". Игрок должен отгадывать буквы, чтобы угадать слово, загаданное сервером. У вас есть ограниченное количество попыток, чтобы отгадать слово.

---

## Шаги для работы с приложением:

### 1. **Запуск приложения**
   - Убедитесь, что у вас установлен Python и библиотека FastAPI.
   - Запустите сервер FastAPI командой:
     ```bash
     uvicorn main:app --reload
     ```
   - Сервер начнёт работать по адресу:
     ```
     http://127.0.0.1:8000
     ```

### 2. **Открытие документации (Swagger UI)**
   - Перейдите в браузере по адресу:
     ```
     http://127.0.0.1:8000/docs
     ```
   - Здесь вы увидите визуальный интерфейс для взаимодействия с игрой. Вы можете отправлять запросы на сервер и получать ответы.

### 3. **Эндпоинты API**
   Вот основные маршруты, которые предоставляет приложение:

   - **POST /start**
     - Начать новую игру.
     - Сервер вернёт информацию о начальном состоянии игры:
       - Загаданное слово (в виде скрытых символов, например: "______").
       - Количество оставшихся попыток.
   - **POST /guess**
     - Угадать букву.
     - **Параметры**:
       - `letter` (строка) — буква, которую вы хотите угадать.
     - **Результат**:
       - Обновлённое состояние игры.
       - Текущее состояние слова (например: "_a____").
       - Количество оставшихся попыток.
       - Статус игры (выиграли, проиграли или продолжается).
   - **GET /state**
     - Получить текущее состояние игры.
     - Вы увидите:
       - Загаданное слово (с угаданными буквами).
       - Список угаданных букв.
       - Количество оставшихся попыток.
       - Статус игры (выиграли, проиграли или продолжается).

### 4. **Пример игрового процесса**
   - Отправьте запрос **POST /start**, чтобы начать новую игру.
   - Отправьте запрос **POST /guess** с буквой, чтобы угадать её.
   - Используйте **GET /state**, чтобы узнать текущее состояние игры.
   - Продолжайте угадывать буквы, пока:
     - Вы не угадаете всё слово (победа).
     - У вас не закончатся попытки (поражение).

### 5. **Примечания**
   - Слова для игры берутся из заранее определённого списка в коде.
   - Если вы хотите использовать собственные слова, отредактируйте список `words` в коде.

### 6. **Ошибки**
   Если вы видите ошибку `404 Not Found` при обращении к корневому пути `/`, это нормально. Используйте `/docs` для взаимодействия с приложением.

## Скриншоты

### Главный экран
![Главный экран](screenshots/screenshot1.png)
### Старт игры
![Start](screenshots/screenshot2.png)
### Экран угадывания буквы
![Guess](screenshots/screenshot3.png)
### Экран текущего состояния игры
![State](screenshots/screenshot3.png)

---

## Пример запроса через Swagger UI:

1. Перейдите на страницу `http://127.0.0.1:8000/docs`.
2. Нажмите на **POST /start** -> `Try it out` -> `Execute`, чтобы начать новую игру.
3. Нажмите на **POST /guess** -> `Try it out`, введите букву (например, `a`) и нажмите `Execute`, чтобы угадать букву.
4. Используйте **GET /state** для проверки текущего состояния игры.



---

## Пример игрового цикла через `cURL` (в терминале):

1. Начните новую игру:
   ```bash
   curl -X POST http://127.0.0.1:8000/start

---

Пример игрового цикла через `cURL` (в терминале):
1. Начните новую игру:
curl -X POST http://127.0.0.1:8000/start

2. Угадайте букву:
curl -X POST -H "Content-Type: application/json" -d '{"letter": "a"}' http://127.0.0.1:8000/guess

3. Узнайте текущее состояние игры:
curl -X GET http://127.0.0.1:8000/state


---


## Пример игрового цикла через `cURL` (в терминале):

1. Начните новую игру:
   ```bash
   curl -X POST http://127.0.0.1:8000/start
2. Угадайте букву:
   curl -X POST -H "Content-Type: application/json" -d '{"letter": "a"}' http://127.0.0.1:8000/guess
3. Узнайте текущее состояние игры:
   curl -X GET http://127.0.0.1:8000/state
